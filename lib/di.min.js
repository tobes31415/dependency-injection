let e;class s{constructor(){this.instances=new Map,this.resolvers=new Map,this.useFactory=this.useFactory.bind(this),this.resolve=this.resolve.bind(this)}useFactory(e,s){if(this.instances.has(e))throw new Error("This token has already been resolved");if(this.resolvers.has(e))throw new Error("A resolver has already been supplied for this token");if("function"!=typeof s)throw new Error("useFactory expects a function");this.resolvers.set(e,s)}useClass(e,s){this.useFactory(e,()=>this.resolve(s))}useObject(e,s){this.useFactory(e,()=>s)}resolve(s){const t=!e;try{if(t&&(e=this),e!==this)throw new Error("Cross Context resolution detected");if(!this.instances.has(s)){const e=(this.resolvers.get(s)||this.defaultResolver)(s);if(!e)throw new Error("Resolver didn't return an instance");this.instances.set(s,e)}return this.instances.get(s)}finally{t&&(e=void 0)}}defaultResolver(e){if("function"!=typeof e)throw new Error("Tokens must either be factory functions, or you must supply a resolver before trying to resolve them");return new e}}const t=new s;export function createRoot(){return new s};export default t;export{t as DI};